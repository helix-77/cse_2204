#include <bits/stdc++.h>
using namespace std;

#define e 0.000001 // tolerance


struct PopulationData
{
    int year;
    double population;
};

/* read data from csv */
vector<PopulationData> readCSV(const string &filename){
    vector<PopulationData> data;
    ifstream inputFile(filename);

    if (!inputFile.is_open())
    {
        cerr << "Error opening the file: " << filename << endl;
        return data; // Return an empty vector if the file cannot be opened
    }

    string header;
    if (getline(inputFile, header))
    {
        int year;
        double population;
        string line;

        while (getline(inputFile, line))
        {
            replace(line.begin(), line.end(), ',', ' '); // Replace commas with spaces
            istringstream linestream(line);
            if (linestream >> year >> population)
            {
                data.push_back({year, population}); // Convert to actual population
            }
            else
            {
                cerr << "Error parsing line: " << line << endl;
            }
        }
    }
    else
    {
        cerr << "Error reading header from the file: " << filename << endl;
    }

    inputFile.close();
    return data;
}

/* Print the read data from the CSV file */
void print_csv(vector<PopulationData> historicalData){
    cout << "Data read from CSV file:" << endl;
    cout << "Year \tPopulation(Millions)\n";
    for (const auto &entry : historicalData){
        cout << entry.year << "\t" << entry.population << endl;
    }
}


/* this function will be generated by the least squares method and later will be used to predict the population */
double func(double x, double a, double b)
{
    return a * x + b;
}


/* Newton's Interpolation function to predict population for certain year */
double interpolatePopulation(const vector<PopulationData> &data, int targetYear){
    int n = data.size();
    vector<vector<double>> dividedDifferences(n, vector<double>(n, 0.0)); // table to store divided differences

    for (int i = 0; i < n; ++i){
        dividedDifferences[i][0] = data[i].population; // Fill the first column with population values
    }

    // Calculate divided differences using population and year
    for (int j = 1; j < n; ++j){
        for (int i = 0; i < n - j; ++i){
            dividedDifferences[i][j] = (dividedDifferences[i + 1][j - 1] - dividedDifferences[i][j - 1]) / (data[i + j].year - data[i].year);   
        }
    }

    // Calculate the interpolated population
    double result = dividedDifferences[0][0];   // y0
    double term = 1.0;                        // (x - x0)

    for (int j = 1; j < n; ++j){
        term *= (targetYear - data[j - 1].year);    // (x - x0)(x - x1)...(x - xn-1)
        result += term * dividedDifferences[0][j];  // y0 + (x - x0)y1 + (x - x0)(x - x1)y2 + ...
    }
    return result;
}



/* Least squares fitting to a linear equation: ax + b */
void leastSquaresFit(const vector<PopulationData> &data, double &a, double &b)
{
    int n = data.size();    // number of data points

    double sumX = 0.0, sumY = 0.0, sumXY = 0.0, sumX2 = 0.0;

    for (const auto &point : data)
    {
        double x = point.year;  
        double y = point.population;

        sumX += x;  
        sumY += y;
        sumXY += x * y; 
        sumX2 += x * x;
    }

    // Solving the system of equations for the linear model using Cramer's rule
    double det = n * sumX2 - sumX * sumX;   

    a = (n * sumXY - sumX * sumY) / det;    
    b = (sumX2 * sumY - sumX * sumXY) / det;
}

/* Newton-Raphson method to find the root of a function */
/*  We used fitted curve equation for predicting the year
    This made the model more reliable and accurate */
double newtonRaphson(double targetPop, double a, double b) {
    double x = 0.0;   // Initial guess
    int max_it = 100;   

    for (int it = 0; it < max_it; ++it) {
        double fx = func(x, a, b) - targetPop;  // f(x)
        double dfx = a;                         // f'(a)

        x = x - fx / dfx;                    // x = x - f(x)/f'(x)

        if (fabs(fx) < e) { 
            return x ;
        }
    }
    cout<<"Year Not Found"<<endl;
    return NAN;
}



void separator(){
    cout << "--------------------------------------------------------------------" << endl;
}



int main()
{
    string filename = "population_data.csv";    // CSV file containing population data
    vector<PopulationData> historicalData = readCSV(filename); // Read data from CSV file and storing it into historicalData vector

    if (historicalData.empty()){
        cout << "No data or error reading CSV file." << endl;
        return 1;
    }

    print_csv(historicalData);  // Print the data read from the CSV file

    separator();
    // Interpolate population for the year 2015
    int targetYear;
    cout << "Enter the year to find corresponding population : ";
    cin >> targetYear;
    double interpolatedPopulation = interpolatePopulation(historicalData, targetYear);
    cout << "\nEstimated population in " << targetYear << ": " << interpolatedPopulation << " million" << endl << endl;


    separator();
    // Least squares fitting to a linear equation
    double a, b;
    leastSquaresFit(historicalData, a, b);  // a = slope, b = intercept
    cout << "Linear Equation of the population data: y = " << a << "x + " << b << endl;
    cout << "\nFitted Curve:" << endl;
    cout << "Year(x)" << setw(24) << "Population Data(csv)" << setw(24) << "Fitted Population(y)" << endl;
    for (const auto &point : historicalData)
    {
        double fittedPopulation = func(point.year, a, b);
        cout << point.year << setw(18) << point.population << setw(26) << fittedPopulation << endl;
    }



    separator();
    // root finding
    cout << "Enter a target population in millions : ";
    double targetPop ;
    cin>>targetPop;

    double root = newtonRaphson(targetPop, a, b);
    int year = round(root);
    // cout << "Approximate Year : " << year << endl;
    cout << targetPop << " million population is expected to be reached in year: " << year << endl;

    separator();
    // Prediction of the next 10 years' population
    cout << "Prediction of the next 10 years' population:" << endl;
    for (int i = 1; i <= 10; i++)
    {
        int targetYear = 2022 + (i);
        double interpolatedPopulation = func(targetYear, a, b);
        cout << "Year " << targetYear << ": \t" << interpolatedPopulation << " million" << endl;
    }

    
    separator();
    cout << setw(25) << "Thank You" << endl << endl;


}
